import 'package:cloud_firestore/cloud_firestore.dart';

/// A model class to represent a vehicle, associated with a user.
class Vehicle {
  // Vehicle UUID will be generated by Firestore as the document ID
  // It will be vehicleNumber + '_' + ownerUserId to ensure uniqueness across owners and easy lookup
  String? id; // Firestore document ID
  String vehicleNumber;
  String? type;
  String? brand;
  String? model;
  String? color;
  String? insuranceProvider;
  String? insurancePolicyNo;
  String ownerUserId; // Link back to /users/{ownerUserId}
  String? driverUserId; // Optional: Who is the primary driver (can be same as owner or different user's UID)
  bool isDriverRegistered; // True if driverUserId refers to an app user, false if just a family member not on the app
  String? notes;

  Vehicle({
    this.id,
    required this.vehicleNumber,
    this.type,
    this.brand,
    this.model,
    this.color,
    this.insuranceProvider,
    this.insurancePolicyNo,
    required this.ownerUserId,
    this.driverUserId,
    this.isDriverRegistered = false,
    this.notes,
  });

  /// Factory constructor to create a Vehicle object from a Firestore DocumentSnapshot.
  factory Vehicle.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    return Vehicle(
      id: doc.id,
      vehicleNumber: data['vehicleNumber'] ?? '',
      type: data['type'],
      brand: data['brand'],
      model: data['model'],
      color: data['color'],
      insuranceProvider: data['insuranceProvider'],
      insurancePolicyNo: data['insurancePolicyNo'],
      ownerUserId: data['ownerUserId'] ?? '',
      driverUserId: data['driverUserId'],
      isDriverRegistered: data['isDriverRegistered'] ?? false,
      notes: data['notes'],
    );
  }

  /// Converts the Vehicle object into a Map for storing in Firestore.
  Map<String, dynamic> toFirestore() {
    return {
      'vehicleNumber': vehicleNumber,
      'type': type,
      'brand': brand,
      'model': model,
      'color': color,
      'insuranceProvider': insuranceProvider,
      'insurancePolicyNo': insurancePolicyNo,
      'ownerUserId': ownerUserId,
      'driverUserId': driverUserId,
      'isDriverRegistered': isDriverRegistered,
      'notes': notes,
      'createdAt': FieldValue.serverTimestamp(), // Add timestamp for creation
      'lastUpdatedAt': FieldValue.serverTimestamp(), // Add timestamp for updates
    };
  }
}
